@model FairWeatherFriend.Models.Race

@{
    ViewData["Title"] = "Details";
}

@using Microsoft.AspNetCore.Identity
@using FairWeatherFriend.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager


<h1>Details</h1>

<div>
    <h4>Race</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Laps)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Laps)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TimeOfDay)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TimeOfDay)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Prize)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Prize)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Track)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Track.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.isCancelled)
        </dt>


        <script type="text/javascript">
            //Finds current date in javascript
            currentDate = new Date()
            var today = new Date();
            var dd = String(today.getDate());
            var mm = String(today.getMonth() + 1);
            var yyyy = today.getFullYear();

            today = mm + '/' + dd + '/' + yyyy;

            //Function to take date property from model and format it to match weather api format
            const formatDate = (date) => {
                const datePartsArray = date.split("/");
                const dayOfDate = (('0' + datePartsArray[1]).slice(-2));
                const monthOfDate = ('0' + datePartsArray[0]).slice(-2);
                const yearOfDate = datePartsArray[2];
                const formattedDate = `${yearOfDate}-${monthOfDate}-${dayOfDate} 00:00:00`;
                return formattedDate;
            }

            //Calculates difference in days between the date property on the C# model and the current day
            const dateDifference = (str1, str2) => { return Math.floor((Date.parse(str2) - Date.parse(str1)) / 86400000) };

            //Date property from C# model
            const date = "@Html.Raw(Model.DateOnly)";
            //Checks to see if date of race is today
            if (date == today) {
                fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${@Html.Raw(Model.Track.ZipCode)},us&appid=19a77daddda7c801c5cb29c3f03812e2`)
                    .then(r => r.json())
                    .then(parsedForecast => {
                        const currentWeatherMain = parsedForecast.weather[0].main
                        const currentWeatherDescription = parsedForecast.weather[0].description
                        var mainstring = currentWeatherMain + "-" + currentWeatherDescription
                        document.querySelector("#forecast").innerHTML = mainstring;
                    })
            //Checks to see if date of race is too far away for weather forecast
            } else if (dateDifference(date, today > 10)) {
                const mainstring = ``;
                document.querySelector("#forecast").innerHTML = mainstring;
            //Fetches forecast if day is not the current day but is in range for weather forecast
            } else {
                fetch(`https://api.openweathermap.org/data/2.5/forecast?zip=${@Html.Raw(Model.Track.ZipCode)},us&appid=19a77daddda7c801c5cb29c3f03812e2`)
                .then(r => r.json())
                .then(parsedForecast => {
                    const forecastArray = parsedForecast.list;
                    const dateMatch = forecastArray.find(f => {
                      return  f.dt_txt === formattedDate
                            })
                    const main = dateMatch.weather[0].main;
                    const description = dateMatch.weather[0].description;

                    const mainstring = main + "-" + description;
                    document.querySelector("#forecast").innerHTML = mainstring;
                })
            }


            const formattedDate = formatDate(date);




        </script>




        @if (Model.isCancelled == true)
        {

            <dd class="col-sm-10">
                Cancelled
            </dd>


        }
        else
        {
            <dd class="col-sm-10">
                Race still on
            </dd>


        }



    </dl>

    <dt class="col-sm-10">
        Weather Forecast
    </dt>
    <dd class="col-sm-2" id="forecast"></dd>
</div>



@if (SignInManager.IsSignedIn(User) && Model.FavoriteRaces.Where(r => r.UserId == @UserManager.GetUserAsync(User).Result.Id).Where(r => r.RaceId == Model.Id).Count() > 0)
    {
        <p>You have opted into notifications for this race.</p>
    } else if (SignInManager.IsSignedIn(User))
        {
        <a class="btn btn-primary"
           asp-controller="Races" asp-action="OptInNotification" asp-route-id="@Model.Id">
            Opt in to Notifications
        </a>
        } else
        {
            <p>Log in to receive notifications about this race!</p>
        }






<div>
    @if (SignInManager.IsSignedIn(User) && @UserManager.GetUserAsync(User).Result.isAdmin == true)
    {
        <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
    }

    @if (SignInManager.IsSignedIn(User) && Model.ParticipatingDrivers.Where(r => r.UserId == @UserManager.GetUserAsync(User).Result.Id).Where(r => r.RaceId == Model.Id).Count() > 0 && DateTime.Compare(Model.TimeOfDay, DateTime.Now) > 0)
    {
        <h5>You have confirmed your attendance for this race</h5>
        <a class="btn btn-primary" asp-action="CancelAttendance" asp-route-id="@Model.Id">Cancel Attendance</a>

    } else if (SignInManager.IsSignedIn(User) && @UserManager.GetUserAsync(User).Result.CarNumber != null && DateTime.Compare(Model.TimeOfDay, DateTime.Now) > 0)
    {
        <a class="btn btn-primary" asp-action="SignUp" asp-route-id="@Model.Id">Attending</a>
    }
    <a asp-action="Index">Back to List</a>
</div>
