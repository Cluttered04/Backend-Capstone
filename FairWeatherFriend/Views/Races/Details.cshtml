@model FairWeatherFriend.Models.Race

@{
    ViewData["Title"] = "Details";
}

@using Microsoft.AspNetCore.Identity
@using FairWeatherFriend.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager


<h1>Details</h1>

<div>
    <h4>Race</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Laps)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Laps)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TimeOfDay)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TimeOfDay)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Prize)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Prize)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Track)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Track.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.isCancelled)
        </dt>
        

        <script type="text/javascript">

            const formatDate = (date) => {
                const datePartsArray = date.split("/");
                const dayOfDate = (('0' + datePartsArray[1]).slice(-2));
                const monthOfDate = ('0' + datePartsArray[0]).slice(-2);
                const yearOfDate = datePartsArray[2];
                const formattedDate = `${yearOfDate}-${monthOfDate}-${dayOfDate} 00:00:00`;
                return formattedDate;
            }

            const date = "@Html.Raw(Model.DateOnly)";
            console.log(typeof (date));
            const formattedDate = formatDate(date);

            fetch(`https://api.openweathermap.org/data/2.5/forecast?zip=${@Html.Raw(Model.Track.ZipCode)},us&appid=19a77daddda7c801c5cb29c3f03812e2`)
                .then(r => r.json())
                .then(parsedForecast => {
                    const forecastArray = parsedForecast.list;
                    const dateMatch = forecastArray.find(f => {
                      return  f.dt_txt === formattedDate
                            })
                    console.log(dateMatch)
                    const main = dateMatch.weather[0].main;
                    const description = dateMatch.weather[0].description;

                    var mainstring = '<p>' + main + '</p>' + '<p>' + description + '</p>';
                    console.log(mainstring);
                    document.querySelector("#forecast").innerHTML = mainstring;
                })


        </script>

        <dt class="col-sm-10">
            Weather Forecast
        </dt>
        <dd id="forecast"></dd>
        @if (Model.isCancelled == true)
        {

            <dd class="col-sm-10">
                Cancelled
            </dd>
        }
        else
        {
            <dd class="col-sm-10">
                Race still on
            </dd>
        }

    </dl>
</div>
<div>
    @if (SignInManager.IsSignedIn(User) && @UserManager.GetUserAsync(User).Result.isAdmin == true)
    {
        <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
    }

    <a asp-action="Index">Back to List</a>
</div>
